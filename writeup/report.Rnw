\documentclass[10pt]{article}
\usepackage[margin=1in]{geometry}
\usepackage{fancyhdr}
\usepackage{wrapfig}
\usepackage{amsmath}
\usepackage{enumerate}
\usepackage{color}
\usepackage{hyperref}
\usepackage{array}
\hypersetup{
    colorlinks,
    citecolor=blue,
    filecolor=blue,
    linkcolor=blue,
    urlcolor=blue
}

% Prevent floats from crossing section or subsection boundaries
\usepackage[section]{placeins}
% Credit for this voodoo goes to Heiko Oberdiek
\makeatletter
\AtBeginDocument{%
  \expandafter\renewcommand\expandafter\subsection\expandafter{%
    \expandafter\@fb@secFB\subsection
  }%
}
\makeatother

\usepackage{graphicx}
\newcolumntype{L}{>{\arraybackslash}m{3cm}}
\setlength{\parskip}{3mm}
\pagestyle{fancy}
\lhead{Final Project \hspace{3mm}  BCB570  \hspace{3mm} Spring \hspace{3mm} Due May 6}
\rhead{Zebulun Arendsee}

\graphicspath{{images/}}

\begin{document}

<<echo=FALSE>>=
set.seed(1234)
@

<<message=F, echo=F>>=
require(xtable)
@

\section{Abstract}
\label{sec:abstract}

It is now well accepted that novel genes can arise de novo from non-genic
material. However, little is known about the circuitry of these young genes. A
few studies have searched for regulatory motifs in the orphan promoters, but
prediction of \textit{functional} binding sites, often having only a few bits
of information, is not reliable. I will augment sequence-based searches for
motifs with expression-based predictions of regulating transcription factors,
whose binding specificities are known from experiment.

My hypothesis is that orphan genes will be directly regulated by only a few
transcription factors with simple binding sites. If I can predict the direct TF
regulators for each gene, given the binding sites are experimentally known, I
can estimate a lower bound of the regulatory information. I can then use a rank
test to determine whether orphans have less information in their promoters. I do
worry that this approach will average over multiple groups, leading to
uninteresting results.

\section{Background}
\label{sec:background}

There are several ways an orphan may acquire existing transcriptional codes.
They may exploit the promoter of an established gene as a secondary open
reading frame; fall under the paradigm of a transposon that inserts upstream;
inherit the full regulatory context of a host that has lost its primary gene;
or emerge as a translational byproduct of a functional long non-coding RNA.
However, there is also evidence that orphans can arise completely de novo.
Though it may at first seem unlikely that all the transcriptional and
translational prerequisites would assemble by chance, given the small amount of
information required for most signals, and given the number of chances a
population of genomes across thousands of generations have, the chance of de
novo orphan emergence may not be so small.


\section{Methods}
\label{sec:methods}

\subsection{Collecting RNA-seq data}
\label{sub:collecting_rna_seq_data}

<<echo=FALSE, message=FALSE>>=
con <- read.delim('../INPUT/conditions.tab')
@

Discovery of orphan regulators requires expression data from many conditions. I
will use exclusively RNA-seq data. To find appropriate data I sifted through
the abstracts of all 380 RNA-seq studies in Arabidopsis. I selected studies
that 1) had multiple biological replicates for each condition, 2) where
conventional RNA-seq (e.g. not bisulfite sequencing), 3) targeted mRNAs (not
sRNAs), 4) where of the Col-0 Arabidopsis ecotype, 5) where not mutants, 6)
tested a unique condition. In other words, I selected orthogonal studies of
wildtype \textit{Arabidopsis thaliana} columbia mRNAs that had multiple
biological replicates (see \ref{tab:sra_table}). I ended up with 12 studies.

\begin{table}[htpb]
    \centering
    \caption{Studies used to build the coexpression networks. D means control,
        BR brassinosteroid, and GA gibberillin.}
    \label{tab:sra_table}
    \begin{tabular}{l | L | L | L}
        accession & description & layout & notes \\
        \hline
        ERP004034 & floral development & (inflorecence meristem, floral meristem, flower) & {} \\
        \hline
        ERP005391 & somatic embryo development & (three stages) & {} \\
        \hline
        SRP003864 & copper defficiency & (normal Cu, low Cu) & Deleted spl7 mutants \\
        \hline
        SRP007113 & female gametophyte & {} & \\
        \hline
        SRP009369 & root hair & {} & {} \\
        \hline
        SRP010642 & hormone treatments & (D, BR-, GA-, BR-GA-) X 2 & Deleted bzr1 mutants \\
           %PAC-PPZ negative for both the GA and BR hormones
           %PAC-GA  negative for BR
           %PAC     negative for GA
        \hline
        SRP018404 & root nitrate response & (normal, high) & Deleted the sRNA runs \\
        \hline
        SRP027256 & drought & {} & Deleted the GI mutants \\
        \hline
        SRP034715 & mildew pathoge & (virulent, avirulent) X 3 & Deleted the water control and the avirulent Emoy2 infected runs \\
        \hline
        SRP035269 & seed development & (3 dev stages) X 3 & Deleted lines CL37 and PDAT\_7, keeping only Fae  \\
        \hline
        SRP044814 & Fe stress & {} & {} \\
        \hline
        SRP063017 & Nematode infection & {} & Deleted cytokine hypersensitive type-A lines \\
        \hline
    \end{tabular}
\end{table}
% Honorable mentions: 1) SRP051665 is interesting in that it attempted to study
% the translatome by extracting mRNAs from polyribosomes. 2) SRP032274 also uses
% PPZ to stop BR hormongering. SRP032366 heat stress, 38C for 15 minutes, deleted
% for lack of biological replicates.

\subsection{Quantify transcript expression}
\label{sub:quantify_transcript_expression}

For expression quantification I am using a new tool, Kallisto, which is a few
orders of magnitude faster than the conventional Bowtie/Cufflinks approach
\cite{bray_near-optimal_2015}.

Rather than aligning all the reads to the genome, Kallisto searches k-mers
against a de Brujin graph of the transcriptome. In this way it finds which
transcripts could have produced each read.

Lyor Pachter, in his Kallisto paper, used only the coding sequences.  RNA-seq
normalization (either TPM or FPKM) is inversely proportional to transcript
effective length (total length minus the average length of the reads), so if we
ommit the 3` and 5` UTRs, the reported expression of small transcripts will be
falsely inflated. The ARAPORT11 annotation includes UTR for almost all of its
genes.

I will use Lyor Pachter's Sleuth R package to normalize across the biological
replicates and produce a single expression vector (with uncertainty estimates)
for each condition.

<<echo=FALSE, message=FALSE>>=
require(ggplot2)
require(reshape2)
require(dplyr)
require(magrittr)
g.degr <- read.delim('../OUTPUT/tf-orf-output/graph-degrees.tab')
g.stat <- read.delim('../OUTPUT/tf-orf-output/graph-stats.tab')
g.degr <- mutate(g.degr, cutoff=factor(cutoff), degree=factor(degree)) %>%
    group_by(cutoff, degree) %>%
    summarize(n = n()) %>%
    ungroup %>%
    mutate(degree=as.numeric(degree))
@

\subsection{Select transcription factor set}
\label{sub:select_transcription_factor_set}

Agris provides a set of experimentally confirmed
\href{http://arabidopsis.med.ohio-state.edu/AtcisDB/bindingsites.html}{TF-binding
    sites}.

I acquired a large list of 2296 TFs (1717 loci) from
\href{http://planttfdb.cbi.pku.edu.cn/index.php?sp=Ath}{plantTFDB}.

\subsection{Orphan annotations}
\label{sub:orphan_annotations}

I will use an in-house list Arabidopsis genes that I have classified as orphans
based on simple BLAST-inferred homology. This is not a very good method since
BLAST is known to be inaccurate for small, rapidly evolving genes (like
orphans). So it is possible that many of the genes I identify as orphans are
older than they appear, having homologs which I missed.

\subsection{Predict direct regulators}
\label{sub:predict_direct_regulators}

I will use ARACNE to trim indirect interactions. ARACNE breaks every triangle
on its weakest edge. Any links remaining between the orphan and a transcription
factor would be assumed to be causal. Although it is possible that the orphan
itself is a transcription factor.

\subsection{Adjustment of motif scores}

\begin{figure}[!ht] \centering
<<score, dpi=300, echo=FALSE, fig.width=4, fig.height=3, message=FALSE>>=
require(ggplot2)
scores <- read.delim('../OUTPUT/tf.tab')['score']
names(scores) <- 'Bits'
ggplot(scores) + 
    geom_histogram(aes(x=Bits), bins=20)

# png(filename='~/Dropbox/sysbio-img_score.png', width = 4, height = 4, units = 'in', res = 300)
# ggplot(scores) + 
#     geom_histogram(aes(x=Bits), bins=20)
# dev.off()
@
  \caption{Bits of information for 183 Arabidopsis TF binding sites.
      For comparison, 2 and 3 letter passwords (a-z) contain 9.4 and 17 bits of
      information, respectively.}
  \label{fig:scores}
\end{figure}

Athamap has predicted binding sites for 183 Arabidopsis transcription factors.
However, most of these binding sites are very low information (see Figure
\ref{fig:scores}).

\section{Results}

\subsection{Plots of orphan to TF connectivity}

\begin{center}
<<degree_chart, echo=F, fig.width=5, fig.height=5>>=
ggplot(g.degr) +
    geom_path(aes(x=degree, y=n, group=cutoff)) +
    facet_wrap(~cutoff)
@
\end{center}

\begin{center}
<<graph_stats, echo=F, fig.width=4, fig.height=4>>=
m <- melt(g.stat, id.vars='cutoff')
ggplot(m) +
    geom_point(aes(x=cutoff, y=value), size=2) +
    geom_path(aes(x=cutoff, y=value, group=variable)) +
    facet_grid(variable ~ ., scale='free_y')
@
\end{center}

It is important to choose a good threshold for ARACNE. Something is really
strange happens when we hit a cutoff of 0.6. I will experiment with a few
cutoffs (0.575, 0.6, 0.7, 0.8) and see how robust the trends I find are.

<<echo=FALSE, message=FALSE>>=
require(tidyr)
require(reshape2)
require(igraph)
require(dplyr)

adj2net <- function(adjmatrix, ...){
    graph_from_adjacency_matrix(adjmatrix, mode="undirected", diag=FALSE, ...)
}

# Return only the largest connected component
largest_component <- function(x){
    components(x) %$%
        which(membership != which.max(csize)) %>%
        delete_vertices(graph=x)
}

# Remove components of size less than or equal to k
prune <- function(g, k=1){
    components(g) %$%
        which(membership %in% which(csize <= k)) %>%
        delete_vertices(graph=g)
}

get.the.graph <- function(cutoff, mat='orphans') {
    g <- read.graph(sprintf('%s/%s/%s.mat' , '../OUTPUT/tf-orf-output/', cutoff, mat), format='ncol')
    V(g)$is_tf <- ifelse(V(g)$name %in% tfs$locus, T, F)
    V(g)$tf_name <- ifelse(V(g)$is_tf, as.character(tfs[which(tfs$locus %in% V(g)$name), ]$factor), NA)

    V(g)$size = 0.2
    V(g)[V(g)$is_tf]$size = 4

    V(g)$color = 'purple'
    V(g)[V(g)$is_tf]$color = 'orange'

    V(g)[V(g)$name == 'AT3G30720']$color = 'red'
    V(g)[V(g)$name == 'AT3G30720']$size = 5

    comp <- components(g)
    cluster11 <- comp$membership[which(comp$membership == 11)] %>% names


    # Delete all edges that are not connected to a TF
    g2 <- delete_edges(g, E(g)[!V(g)$is_tf %--%!V(g)$is_tf])

    # Number of genes controlled by each TF
    tf.degree <- degree(g2, V(g2)[V(g2)$is_tf])
    fam <- unique(tfs[, c('family', 'locus')])
    tf.table <- data.frame(
        tf = fam[which(fam$locus %in% names(tf.degree)), 'family'],
        locus = names(tf.degree),
        degree = tf.degree
    )

    # TFs controlling each gene
    regulators <- list()
    for(i in which(!V(g2)$is_tf)){
        regulators[[V(g2)[i]$name]] <- neighbors(g2, i, mode='all')$name
    }

    list(
        g=g,
        comp=comp,
        g2=g2,
        tf.degree=tf.degree,
        tf.table=tf.table,
        regulators=regulators
    )
}

tfs <- read.delim('../OUTPUT/tf.tab')

# cutoffs
cut <- c('c0.575', 'c0.6', 'c0.7', 'c0.8') 

algof <- lapply(cut, get.the.graph)

names(algof) <- cut %>% gsub(pattern='c', replacement='cutoff=')
@

\begin{figure}[!ht] \centering
<<message=F, echo=F, dpi=300, fig.width=7, fig.height=7, cache=T>>=
par(mfrow=c(2,2), mar=c(2,2,2,2))
    plot(algof[[1]]$g , vertex.label=NA, main=names(algof)[1]) #vertex.label=V(algof[[1]]$g )$tf_name)
    plot(algof[[1]]$g2, vertex.label=NA, main=names(algof)[1]) #vertex.label=V(algof[[1]]$g2)$tf_name)
    plot(algof[[2]]$g , vertex.label=NA, main=names(algof)[2]) #vertex.label=V(algof[[2]]$g )$tf_name)
    plot(algof[[2]]$g2, vertex.label=NA, main=names(algof)[2]) #vertex.label=V(algof[[2]]$g2)$tf_name)
@
  \caption{Graph of orphans (small dots) and TFs (orange). The edges not
      connected to a TF are trimmed in plots on the right. The ARACNE cutoffs
      are listed above the plots.}
  \label{fig:1-2}
\end{figure}

\begin{figure}[!ht] \centering
<<message=F, echo=F, dpi=300, fig.width=7, fig.height=7, cache=T>>=
par(mfrow=c(2,2), mar=c(2,2,2,2))
    plot(algof[[3]]$g , vertex.label=NA, main=names(algof)[3]) #vertex.label=V(algof[[3]]$g )$tf_name)
    plot(algof[[3]]$g2, vertex.label=NA, main=names(algof)[3]) #vertex.label=V(algof[[3]]$g2)$tf_name)
    plot(algof[[4]]$g , vertex.label=NA, main=names(algof)[4]) #vertex.label=V(algof[[4]]$g )$tf_name)
    plot(algof[[4]]$g2, vertex.label=NA, main=names(algof)[4]) #vertex.label=V(algof[[4]]$g2)$tf_name)
@
  \caption{Graph of orphans (small dots) and TFs (orange). The edges not
      connected to a TF are trimmed in plots on the right. The ARACNE cutoffs
      are listed above the plots.}
  \label{fig:3-4}
\end{figure}

The results for orphans seem quite robust against cutoff. That is, there are
always only 3 or 4 TFs outside the giant clusters (See figures \ref{fig:1-2}
and \ref{fig:3-4}).

\subsection{Plots of random genes to TF connectivity}

In order to test the significance of the trends in the orphans, I sampled 100
random sets of genes that were both non-orphan and non-TF. The size of each set
was equal to the number of orphans.

The orphan and non-orphan plots share a few features in common (by visual
comparison of figures \ref{fig:1-2} and \ref{fig:3-4} to figures \ref{fig:r1-2}
and \ref{fig:r3-4}. They all share the same 3 giant, tight clusters. But there
are two features that seem to stand out among the orphans.

\begin{enumerate}
  \item The orphans seem to have less diverse promoters, as I hypothesized.
  \item The orphans have three tightly linked clusters that are not near any
      known promoter.
\end{enumerate}

The second observation is quite bizarre. I would not have predicted this.

<<cache=TRUE, echo=FALSE>>=
rlgof.names <- 1:100 %>% sprintf(fmt='r%s')
rlgof <- lapply(rlgof.names, function(a) get.the.graph('c0.6', mat=a))
names(rlgof) <- rlgof.names
@

\begin{figure}[!ht] \centering
<<message=F, echo=F, dpi=300, fig.width=7, fig.height=7, cache=T>>=
par(mfrow=c(2,2), mar=c(2,2,2,2))
    plot(rlgof[[1]]$g , vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[1]]$g )$tf_name)
    plot(rlgof[[1]]$g2, vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[1]]$g2)$tf_name)
    plot(rlgof[[2]]$g , vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[2]]$g )$tf_name)
    plot(rlgof[[2]]$g2, vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[2]]$g2)$tf_name)
@
  \caption{Graph of randomly selected genes (small dots) and TFs (orange). The edges not
      connected to a TF are trimmed in plots on the right. The ARACNE cutoffs
      are listed above the plots.}
  \label{fig:r1-2}
\end{figure}

\begin{figure}[!ht] \centering
<<message=F, echo=F, dpi=300, fig.width=7, fig.height=7, cache=T>>=
par(mfrow=c(2,2), mar=c(2,2,2,2))
    plot(rlgof[[3]]$g , vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[3]]$g )$tf_name)
    plot(rlgof[[3]]$g2, vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[3]]$g2)$tf_name)
    plot(rlgof[[4]]$g , vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[4]]$g )$tf_name)
    plot(rlgof[[4]]$g2, vertex.label=NA, main='cutoff=0.6') #vertex.label=V(rlgof[[4]]$g2)$tf_name)
@
  \caption{Graph of randomly selected genes (small dots) and TFs (orange). The edges not
      connected to a TF are trimmed in plots on the right. The ARACNE cutoffs
      are listed above the plots.}
  \label{fig:r3-4}
\end{figure}

\subsection{Testing the significance of orphan regulatory sparsity}

There are several different metrics I could test for TF overrepresentation. The
simplest one is to ignore degree and just count the number of unique TFs in
each network (orange dots in the plots above). Only 4 of the 100 random samples
had as low a number of TFs as the orphans (10). This works out to a p-value of
0.04. This is consistent with my hypothesis (in hindsight, I should have drawn
more random samples).

<<echo=FALSE>>=
not.k <- lapply(rlgof, function(x) nrow(x$tf.table)) %>% unlist
orp.k <- nrow(algof[[2]]$tf.table)
pval  <- 1 - sum(not.k > orp.k) / (length(not.k))
@

\subsection{Orphan regulating TFs}

<<results='asis', echo=FALSE, message=FALSE>>=
require(magrittr)
merge(algof[[2]]$tf.table, tfs) %>%
    subset(degree > 0) %>%
    arrange(-degree) %>%
    xtable(caption='Orphan regulating TFs. Cutoff of 0.8')
@

Quite in contrast to my expectations, these promoters are pretty typical.

\section{Conclusions and future directions}

This simple study provides evidence that orphan promoters may indeed be less
diverse than conventional genes.

When time permits, I plan to repeat this study with better RNA-seq data. Also
the triple clusters so prominent in the plots need to be addressed. They may be
an artifact of the conditions I selected (e.g. root, leaves, and flowers).

The second half of my hypothesis, that the information content of the promoter
motifs is lower among the orphans, is not supported by this study. I did not
statistically test for a difference, though.

% Next I can test the difference in connected size of the graphs (prior to
% cutting edges not linked to TFs).
%
% <<echo=FALSE>>=
% k <- length(algof[[2]]$comp$csize)
% d <- data.frame(
%     csize=algof[[2]]$comp$csize %>% sort(dec=T),
%     color=rep('orphan', k),
%     rank=1:k,
%     group=rep(0, k)
% )
% for(i in 1:length(rlgof)){
%     k <- length(rlgof[[i]]$comp$csize)
%     dd <- data.frame(
%         csize=rlgof[[i]]$comp$csize %>% sort(dec=T),
%         color=rep('random', k),
%         rank=1:k,
%         group=rep(i, k)
%     )
%     d <- rbind(d, dd)
% }
% ggplot(subset(d, rank>3)) +
%     geom_path(aes(x=rank, y=csize, group=group, color=color))
% @
%
%
%
% <<results='asis', echo=FALSE, message=FALSE>>=
% require(magrittr)
% merge(tf.table, tfs) %>%
%     subset(degree > 0) %>%
%     arrange(-degree) %>%
%     xtable
% @

\bibliographystyle{plain}
\bibliography{report}

\end{document}
