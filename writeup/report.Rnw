\documentclass[10pt]{article}
\usepackage[margin=1in]{geometry}
\usepackage{fancyhdr}
\usepackage{wrapfig}
\usepackage{amsmath}
\usepackage{enumerate}
\usepackage{placeins}
\usepackage{color}
\usepackage{hyperref}
\usepackage{array}
\hypersetup{
    colorlinks,
    citecolor=blue,
    filecolor=blue,
    linkcolor=blue,
    urlcolor=blue
}
\usepackage{graphicx}
\newcolumntype{L}{>{\arraybackslash}m{3cm}}
\setlength{\parskip}{3mm}
\pagestyle{fancy}
\lhead{Final Project \hspace{3mm}  BCB570  \hspace{3mm} Spring \hspace{3mm} Due May 6}
\rhead{Zebulun Arendsee}

\graphicspath{{images/}}

\begin{document}

<<>>=
set.seed(1234)
@

<<message=F, echo=F>>=
require(xtable)
@


Two vectors are orthogonal if and only if $\boldsymbol{a} \cdot \boldsymbol{b} = 0$

\section{Abstract}
\label{sec:abstract}

It is now well accepted that novel genes can arise de novo from non-genic
material. However, little is known about the circuitry of these young genes. A
few studies have searched for regulatory motifs in the orphan promoters, but
prediction of \textit{functional} binding sites, often having only a few bits
of information, is not reliable. I will augment sequence-based searches for
motifs with expression-based predictions of regulating transcription factors,
whose binding specificities are known from experiment.

My hypothesis is that orphan genes will be directly regulated by only a few
transcription factors with simple binding sites. If I can predict the direct TF
regulators for each gene, given the binding sites are experimentally known, I
can estimate a lower bound of the regulatory information. I can then use a rank
test to determine whether orphans less information in their promoters. I do
worry that this approach will average over multiple groups, leading to
uninteresting results. So I will also experiment with clustering by regulator
(I'm still a little vague on how I will do this).

\section{Background}
\label{sec:background}

There are several ways an orphan may acquire existing transcriptional codes.
They may exploit the promoter of an established gene as a secondary open
reading frame; fall under the paradigm of a transposon that inserts upstream;
inherit the full regulatory context of a host that has lost its primary gene;
or emerge as a translational byproduct of a functional long non-coding RNA.
However, there is also evidence that orphans can arise completely de novo.
Though it may at first seem unlikely that all the transcriptional and
translational prerequisites would assemble by chance, given the small amount of
information required for most signals, and given the number of chances a
population of genomes across thousands of generations have, the chance of de
novo orphan emergence may not be so small. But this is unacceptably qualitative.

The first step required to codify orphan dynamics is a quantitative knowledge of 


\section{Methods}
\label{sec:methods}

\subsection{Collecting RNA-seq data}
\label{sub:collecting_rna_seq_data}

Discovery of orphan regulators requires expression data from many conditions. I
will use exclusively RNA-seq data. To find appropriate data I sifted through
the abstracts of all 380 RNA-seq studies in Arabidopsis. I selected studies
that 1) had multiple biological replicates for each condition, 2) where
conventional RNA-seq (e.g. not bisulfite sequencing), 3) targeted mRNAs (not
sRNAs), 4) where of the Col-0 Arabidopsis ecotype, 5) where not mutants, 6)
tested a unique condition. In other words, I selected orthogonal studies of
wildtype \textit{Arabidopsis thaliana} columbia mRNAs that had multiple
biological replicates (see \ref{tab:sra_table}). I ended up with 12 studies.

\begin{table}[htpb]
    \centering
    \caption{Studies used to build the coexpression networks. D means control,
        BR brassinosteroid, and GA gibberillin.}
    \label{tab:sra_table}
    \begin{tabular}{l | L | L | L}
        accession & description & layout & notes \\
        \hline
        ERP004034 & floral development & (inflorecence meristem, floral meristem, flower) & {} \\
        \hline
        ERP005391 & somatic embryo development & (three stages) & {} \\
        \hline
        SRP003864 & copper defficiency & (normal Cu, low Cu) & Deleted spl7 mutants \\
        \hline
        SRP007113 & female gametophyte & {} & \\
        \hline
        SRP009369 & root hair & {} & {} \\
        \hline
        SRP010642 & hormone treatments & (D, BR-, GA-, BR-GA-) X 2 & Deleted bzr1 mutants \\
           %PAC-PPZ negative for both the GA and BR hormones
           %PAC-GA  negative for BR
           %PAC     negative for GA
        \hline
        SRP018404 & root nitrate response & (normal, high) & Deleted the sRNA runs \\
        \hline
        SRP027256 & drought & {} & Deleted the GI mutants \\
        \hline
        SRP034715 & mildew pathoge & (virulent, avirulent) X 3 & Deleted the water control and the avirulent Emoy2 infected runs \\
        \hline
        SRP035269 & seed development & (3 dev stages) X 3 & Deleted lines CL37 and PDAT\_7, keeping only Fae  \\
        \hline
        SRP044814 & Fe stress & {} & {} \\
        \hline
        SRP063017 & Nematode infection & {} & Deleted cytokine hypersensitive type-A lines \\
        \hline
    \end{tabular}
\end{table}
% Honorable mentions: 1) SRP051665 is interesting in that it attempted to study
% the translatome by extracting mRNAs from polyribosomes. 2) SRP032274 also uses
% PPZ to stop BR hormongering. SRP032366 heat stress, 38C for 15 minutes, deleted
% for lack of biological replicates.

\subsection{Quantify transcript expression}
\label{sub:quantify_transcript_expression}

For expression quantification I am using a new tool, Kallisto, which is a few
orders of magnitude faster than the conventional Bowtie/Cufflinks approach
\cite{bray_near-optimal_2015}.

Rather than aligning all the reads to the genome, Kallisto searches k-mers
against a de Brujin graph of the transcriptome. In this way it finds which
transcripts could have produced each read.

Lyor Pachter, in his Kallisto paper, used only the coding sequences. But I
think this is a wretched idea, so I used the gene models of the Arabidopsis
ARAPORT11 to predict the transcriptome. RNA-seq normalization (either TPM or
FPKM) is inversely proportional to transcript effective length (total length
minus the average length of the reads), so if we ommit the 3` and 5` UTRs, the
reported expression of small transcripts will be falsely inflated. The
ARAPORT11 annotation includes UTR for almost all of its genes.

I will use Lyor Pachter's Sleuth R package to normalize across the biological
replicates and produce a single expression vector (with uncertainty estimates)
for each condition.

\subsection{Select transcription factor set}
\label{sub:select_transcription_factor_set}

Agris provides a set of experimentally confirmed
\href{http://arabidopsis.med.ohio-state.edu/AtcisDB/bindingsites.html}{TF-binding
    sites}.

I acquired a large list of 2296 TFs (1717 loci) from
\href{http://planttfdb.cbi.pku.edu.cn/index.php?sp=Ath}{plantTFDB}.

\subsection{Orphan annotations}
\label{sub:orphan_annotations}

I will use an in-house list Arabidopsis genes that I have classified as orphans
based on simple BLAST-inferred homology. This is not a very good method since
BLAST is known to be inaccurate for small, rapidly evolving genes (like
orphans). So it is possible that many of the genes I identify as orphans are
older than they appear, having homologs which I missed.

\subsection{Predict direct regulators}
\label{sub:predict_direct_regulators}

There are several possible approaches I could use here.

The easiest possibility would be to use ARACNE to trim indirect interactions.
Any links remaining between the orphan and a transcription factor would be
assumed to be causal. Although it is possible that the orphan itself is a
transcription factor.

A possibly more powerful method is a form of intervention calculus that builds
a DAG from observed data \cite{maathuis} and the pcalg R library.

\subsection{Adjustment of motif scores}

\begin{figure}[!ht] \centering
<<echo=FALSE, fig.width=4, fig.height=3, message=FALSE>>=
require(ggplot2)
scores <- read.table('scores.tab')
names(scores) <- 'Bits'
ggplot(scores) + 
    geom_histogram(aes(x=Bits), bins=20)
@
  \caption{Bits of information for 183 Arabidopsis TF binding sites.
      For comparison, 2 and 3 letter passwords (a-z) contain 9.4 and 17 bits of
      information, respectively.}
  \label{fig:scores}
\end{figure}

Athamap has predicted binding sites for 183 Arabidopsis transcription factors.
However, most of these binding sites are very low information (see Figure
\ref{fig:scores}).

\subsection{Build full expression matrix}
\label{sub:build_full_expression_matrix}

\section{Results}

<<echo=FALSE, message=FALSE, fig.width=7, fig.height=7, fig.cap='Cutoff=0.5'>>=
require(tidyr)
require(reshape2)
require(igraph)
require(dplyr)

adj2net <- function(adjmatrix, ...){
    graph_from_adjacency_matrix(adjmatrix, mode="undirected", diag=FALSE, ...)
}

# Return only the largest connected component
largest_component <- function(x){
    components(x) %$%
        which(membership != which.max(csize)) %>%
        delete_vertices(graph=x)
}

# Remove components of size less than or equal to k
prune <- function(g, k=1){
    components(g) %$%
        which(membership %in% which(csize <= k)) %>%
        delete_vertices(graph=g)
}

orphans <- read.table('../INPUT/orphans', stringsAsFactors=F)$V1

tfs <- read.delim('../OUTPUT/tf.tab')

g <- read.graph('../OUTPUT/tf-orf-output/c0.5/orphans.mat', format='ncol')


    # # temp data ##############################
    # tfs$locus <- sample(V(g)$name, nrow(tfs)) 
    # tfs <- tfs[1:50, ]
    # ##################################


V(g)$is_tf <- ifelse(V(g)$name %in% tfs$locus, T, F)

V(g)$size = 0.2
V(g)[V(g)$is_tf]$size = 2

V(g)$color = 'purple'
V(g)[V(g)$is_tf]$color = 'orange'

V(g)[V(g)$name == 'AT3G30720']$color = 'red'
V(g)[V(g)$name == 'AT3G30720']$size = 5

# Delete all edges that are not connected to a TF
g <- delete_edges(g, E(g)[!V(g)$is_tf %--%!V(g)$is_tf])

# Number of genes controlled by each TF
tf.degree <- degree(g, V(g)[V(g)$is_tf])
fam <- unique(tfs[, c('family', 'locus')])
tf.table <- data.frame(
    tf = fam[which(fam$locus %in% names(tf.degree)), 'family'],
    locus = names(tf.degree),
    degree = tf.degree
)

# TFs controlling each gene
regulators <- list()
for(i in which(!V(g)$is_tf)){
    regulators[[V(g)[i]$name]] <- neighbors(g, i, mode='all')$name
}

plot(g, vertex.label=NA)

@

<<results='asis', echo=FALSE>>=
merge(tf.table, tfs) %>%
    subset(degree > 0) %>%
    arrange(-degree) %>%
    xtable
@

<<echo=FALSE>>=
correlation.between.promoters <- function(){
  mim <- build.mim(pm, estimator="spearman")
  aracne.net <- aracne(mim)
  ag <- adj2net(aracne.net > 0.3)
  plot(ag, vertex.size=1)
}

correlation.between.conditions <- function(){
  mim <- build.mim(em, estimator="spearman")
  aracne.net <- aracne(mim)
  ag <- adj2net(aracne.net > 0.2)
  plot(ag, vertex.size=1)
}
@

% \begin{figure}[!ht] \centering
% <<echo=FALSE, message=FALSE, cache=TRUE, fig.width=6, fig.height=6>>=
%
% source('../promoter-normalization.R')
% g <- list()
% for(f in c('HAHB4', 'PCF2', 'MYC2', 'bZIP911(1)', 'TCP20', 'ARR10')){
%     a <- load_promoter(sprintf('../INPUT/athamap/%s.txt', f))
%     b <- add_adjusted_scores(a)
%     d.dis <- density(a$Relative.distance) 
%     g[[f]] <- ggplot() +
%         geom_line(
%             aes(x=position, y=density),
%             color='red',
%             data=data.frame(density=scale(d.dis$y), position=d.dis$x)
%         ) +
%         geom_smooth(
%             aes(x=position, y=score),
%             color='blue',
%             data=data.frame(score=a$Score, position=a$Relative.distance)
%         ) +
%         geom_smooth(
%             aes(x=position, y=adjusted_score),
%             color='green',
%             data=data.frame(adjusted_score=b$adjusted_score, position=b$Relative.distance)
%         ) +
%         ggtitle(f) +
%         theme(
%             axis.text=element_blank(),
%             axis.ticks=element_blank(),
%             axis.title=element_blank()
%         )
% }
% require(gridExtra)
% grid.arrange(grobs=g)
%
% @
% \caption{Binding site density (\textbf{Red}), score \textbf{blue}, and adjusted
%     score \textbf{green}. This is a terrible method.}
%   \label{fig:densities}
% \end{figure}
%
% \begin{figure}[!ht] \centering
%     \includegraphics[width=0.5\textwidth]{../data/logos/DEAR4(1)}
%   \caption{DEAR4 motif}
% \end{figure}


% \begin{figure}[!ht] \centering
% <<echo=FALSE, fig.width=7, fig.height=7, cache=TRUE>>=
%
% #' Build orphan promoter network
% #' 
% #' @param k keep only motifs with less than n/k non-zero scores
% pm.net <- function(spm, cor.cutoff=0.55, cor.method='spearman', k=5){
%   spm <- spm[, which(colSums(spm > 0) < (nrow(spm) / k))]
%   spm[, 'TaNAC69.1.'] <- NULL
%   spm <- spm[which(rowSums(spm) != 0), ]
%   n <- rownames(spm)
%   spm <- sapply(spm, function(x) x / max(x))
%   rownames(spm) <- n
%   p.cor <- cor(t(spm), method=cor.method)
%   ag <- adj2net(p.cor > cor.cutoff)
%   # plot(ag, vertex.label=NA, vertex.size=0.2)
%   ag
% }
%
% em.net <- function(sem, cor.cutoff=0.6, cor.method='spearman'){
%   sem <- sem[, -c(7,8,9,10)] # these ones are WAY too correlated
%   sem[is.na(sem)] <- 0
%   sem <- sem[which(rowSums(sem) != 0), ]
%   sem <- scale(sem)
%   #
%   # mim <- build.mim(t(sem), estimator=cor.method)
%   # aracne.net <- aracne(mim)
%   # ag <- adj2net(aracne.net > 0.4)
%   # # plot(ag, vertex.label=NA, vertex.size=1)
%   #
%   p.cor <- cor(t(sem), method=cor.method)
%   ag <- adj2net(p.cor > cor.cutoff)
%   # plot(ag, vertex.label=NA, vertex.size=0.2)
%   ag
% }
%
% graph.with.permutations <- function(sem, spm, pcut, ecut, k=5){
%   perm.sem <- sem
%   rownames(perm.sem) <- sample(rownames(perm.sem))
%   graph.intersection(pm.net(spm, pcut, k), em.net(perm.sem, ecut))
% }
%
%   
% spm <- pm[incl_orphans, ]
% sem <- em[incl_orphans, ]
% pk <- 0.65
% ek <- 0.85
% porf <- pm.net(spm, pk, k=10)
% eorf <- em.net(sem, ek)
% iorf <- graph.intersection(porf, eorf)
% riorf <- graph.with.permutations(sem, spm, pk, ek, k=5)
% par(mfrow=c(1,2), mar=c(0,0,0,0))
% # plot(porf, vertex.label=NA, vertex.size=0.2)
% # plot(eorf, vertex.label=NA, vertex.size=0.2)
% plot(iorf, vertex.label=NA, vertex.size=0.2)
% plot(riorf, vertex.label=NA, vertex.size=0.2)
%
% @
%
% \caption{Orphan gene graphs: \textbf{top left} promoter similarity, \textbf{top
%         right} gene co-expression, \textbf{bottom left} promoter-expression
%     intersection, \textbf{bottom right} promoter-expression intersection of
%     graph with randomized labels.}
%   \label{fig:graphs}
% \end{figure}
%
% \begin{figure}[!ht] \centering
% <<echo=FALSE, fig.width=7, fig.height=7, cache=TRUE>>=
%
% n <- length(incl_orphans)
% loci_sample <- sample(rownames(em)[-which(rownames(em) %in% incl_orphans)], n)
%   
% spm <- pm[loci_sample, ]
% sem <- em[loci_sample, ]
%
% pk <- 0.9
% ek <- 0.9
% porf <- pm.net(spm, pk)
% eorf <- em.net(sem, ek)
% iorf <- graph.intersection(porf, eorf)
%
% riorf <- graph.with.permutations(spm, sem, pk, ek)
%
% par(mfrow=c(2,2), mar=c(0,0,0,0))
% # plot(porf, vertex.label=NA, vertex.size=0.2)
% # plot(eorf, vertex.label=NA, vertex.size=0.2)
% plot(iorf, vertex.label=NA, vertex.size=0.2)
% plot(riorf, vertex.label=NA, vertex.size=0.2)
% @
%
% \caption{Conserved gene graphs: \textbf{top left} promoter similarity, \textbf{top
%         right} gene co-expression, \textbf{bottom left} promoter-expression
%     intersection, \textbf{bottom right} promoter-expression intersection of
%     graph with randomized labels.}
%   \label{fig:graphs_ancient}
% \end{figure}
%
% \section{Conclusions}
% \label{sec:conclusions}
%
% There are many problems with what I did.

\bibliographystyle{plain}
\bibliography{report}

\end{document}


% \begin{enumerate}
%   \item Take all TAIR10 models
%   \item Merge genes with identical coding sequences
%   \item Build kallisto index with these genes
%   \item Select set of interesting Arabidopsis studies
%   \begin{itemize}
%       \item want wide variety of conditions
%       \item use SRAdb to get list of runids
%       \item for each, fetch | fastq-dump | kallisto
%   \end{itemize}
%   \item In Sleuth, normalize all the studies merge into final expression table
% \end{enumerate}
%
% \begin{enumerate}
%   \item Do the orphans cluster together in expression?
%   \item If so, do they cluster more than I would expect?
%   \item Take the largest or most interesting cluster
%   \begin{enumerate}
%     \item  Do they share more interactions than I would expect? If so, this is
%        evidence that the expression clustering has some basis in protein
%        function, rather than chance.
%     \item Do they share a common, simple promoter motif?
%     \item Do they share a common upstream promoter?
%   \end{enumerate}
% \end{enumerate}
%
% Naive hypothesis:
%
% If the genes are co-expressed they must be part of the same functional
% pathway. Expression is driven by selection.
%
% Other possibilities:
%
% They share a common origin. Expression is neutral. The co-expression
% predates any shared functionality.
%
% Story 1: A transposon proliferation provided the promoter machinery that
% animated the non-genic precursor of the orphan.
%
% Story 2: If the promoter is completely de novo, the most likely regulatory
% motifs to have arisen are the shortest, most simple ones.
%
% Perhaps, because they are coexpressed originally, and since they therefore
% have the chance to interact, selection will work to enhance the
% similarities, thus drawing the cluster together.
%
% I want to know about the promoters motifs that are being used by the
% orphan genes. However, predicting functional binding sites de novo is
% extraordinarily difficult. So I will start by searching for transcription
% factors that are correlated with the particular orphan genes.
%
% I will treat each orphan as if it is the sole output of the transcription
% factor network. Then I will build a correlation network including the
% transcription factors and the orphan. I assume there are two types of genes:
% transcription factors and non-transcription factors. In a directed graph, the
% transcription factors will be internal nodes, and the non-transcription factors
% are leafs. Thus, non-transcription factors are all unconnected and independent.
% This allows me to model the transcription factors and a single gene, ignoring
% all others. By reducing the search space so greatly, I can use more
% computationally intensive tools than would otherwise be feasible.
%
% Of course, my assumption that non-transcription factors have no effect on the
% transcription of other genes is not entirely true. A protein can, for example,
% catalyze the production of a metabolite that activates a transcriptional
% repressor of another gene.
%
% Do the orphan genes cluster in their own little networks? If so, are these
% functional clusters or artifacts of common origin? For example, were they
% all animated by insertions by the same type of telomere?
%
% Orphan problems:
%
%     Generally GO is not an option. There are only a few orphans that even have
%     GO terms.
%
%     Generally, evolutionary methods are not available.
%
%     There is a few added layer of uncertainty: the orphans may not actually
%     express a functional (whatever that means) protein product. They may be
%     noise.
%
% Unfortunately, the exprimental structures of RNA-seq data are not encoded in
% the SRA metadata.
%
% \begin{enumerate}
%   \item Arabidopsis thaliana RNA-seq: take maybe 3 studies. Run through my
%    RNA-seq pipeline using Kallisto. Process with Sleuth. Include the
%    bootstrapping procedure.
%   \item Use snakefile to organize run
%   \item Compare to interaction network data, using IntAct
%   \item Compare to promoter motif set similarity. How to do this? Retrieve
%    putative set of discrete regulatory elements (one exists for
%    Arabidopsis), Draw edges between genes if there share a common element.
%    Weights are relative to the number of shared elements. This is not the
%    only way to do it, but it may work.
%   \item Compare genomic distance network.
% \end{enumerate}
